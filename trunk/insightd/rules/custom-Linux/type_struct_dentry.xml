<?xml version="1.0" encoding="UTF-8"?>
<!--
	File created by Christian Schneider <chrschn@sec.in.tum.de>
-->
<typeknowledge version="1">
	<rules>
		<!--
		Reference: http://lxr.linux.no/#linux+v2.6.32.58/include/linux/dcache.h#L89
		-->
		<rule priority="102">
			<name>dentry.d_u.d_child</name>
			<description>
				Make nested members of union "d_u" accessible
			</description>
			<filter>
				<datatype>struct</datatype>
				<typename>dentry</typename>
				<members>
					<member>d_u</member>
					<member match="any"></member>
				</members>
			</filter>
			<action type="inline">
				// Allow access to "d_child", but not to "d_rcu"
				if (arguments[1][1] == 0)
					return false;          // false: fall back to default
				else
					return new Instance(); // invalid: don't use
			</action>
		</rule>

<!--		<rule priority="103">
			<name>dentry.d_u.d_child.next</name>
			<description>
				Even though "d_u" is a union, the member "d_child.next" can be
				accessed safely.
			</description>
			<filter>
				<datatype>struct</datatype>
				<typename>dentry</typename>
				<members>
					<member>d_u</member>
					<member>d_child</member>
					<member>next</member>
				</members>
			</filter>
			<action type="inline">
				var dentry = arguments[0];
				var members = arguments[1];
				var next = dentry.Member(members[0]).Member(members[1]).Member(members[2]);
				next.ChangeType(dentry.TypeId());
				next.AddToAddress(-dentry.MemberOffset(members[0]));
				return next;
			</action>
		</rule>-->

		<rule priority="110">
			<name>dentry_hashtable</name>
			<description>
				Variable "dentry_hashtable" points to an array of hlist_head objects.
			</description>
			<filter>
				<variablename>dentry_hashtable</variablename>
				<datatype>pointer</datatype>
			</filter>
			<action type="inline">
				var table = arguments[0];
				var ret = new Array();
				// Hash table has size (1 &lt;&lt; d_hash_shift)
				var hash_shift = new Instance("d_hash_shift");
				var len = 1 &lt;&lt; hash_shift.toUInt32();
				for (var i = 0; i &lt; len; ++i) {
					var e = table.ArrayElem(i);
					ret.push(e);
//					if (e.toPointer() != 0)
//						println(e.Name(), "= 0x" + e.toPointer());
				}
				return ret;
			</action>
		</rule>
		
		<rule priority="111">
			<name>dentry_hashtable[i].first</name>
			<description>
				Variable "dentry_hashtable" holds "struct dentry" objects
			</description>
			<filter>
				<variablename match="wildcard">dentry_hashtable\[*\]</variablename>
				<datatype>struct</datatype>
				<typename>hlist_head</typename>
				<members>
					<member>first</member>
				</members>
			</filter>
			<action type="inline">
				var head = arguments[0];
				var members = arguments[1];
				var inst = head.Member(members[0]);
				inst.ChangeType("dentry");
				if (!inst.IsNull())
					inst.AddToAddress(-inst.MemberOffset("d_hash"));
				return inst;
			</action>
		</rule>

		<rule priority="103">
			<name>dentry.d_hash.next</name>
			<description>
				Process hlist_node entry
			</description>
			<filter>
				<datatype>struct</datatype>
				<typename>dentry</typename>
				<members>
					<member>d_hash</member>
					<member>next</member>
				</members>
			</filter>
			<action type="function" file="generic_lists.js">hlist_node_next</action>
		</rule>

		<rule priority="103">
			<name>dentry.d_lru.next</name>
			<description>
				Dentry objects are arranged in an LRU list using d_lru
			</description>
			<filter>
				<datatype>struct</datatype>
				<typename>dentry</typename>
				<members>
					<member>d_lru</member>
					<member match="any"></member>
				</members>
			</filter>
			<action type="function" file="generic_lists.js">list_head_member</action>
		</rule>

	</rules>
</typeknowledge>
