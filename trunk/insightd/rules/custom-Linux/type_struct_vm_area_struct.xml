<?xml version="1.0" encoding="UTF-8"?>
<!--
	File created by Christian Schneider <chrschn@sec.in.tum.de>
-->
<typeknowledge version="1.0" os="linux" >

	<rules>
		<rule priority="102">
			<name>vm_area_struct.vm_rb.rb_{left,right}</name>
			<description>vm_rb.rb_{left,right} point to a "vm_area_struct"</description>
			<filter>
				<datatype>struct</datatype>
				<typename>vm_area_struct</typename>
				<members>
					<member>vm_rb</member>
					<member match="regex">rb_(left|right)</member>
				</members>
			</filter>
			<action type="inline">
				var vms = arguments[0];
				var members = arguments[1];
				var node = vms.Member(members[0]).Member(members[1]);
				
				// Change node's type to vm_area_struct and fix offset
				node.ChangeType(vms.TypeId());
				node.AddToAddress(-vms.MemberOffset(members[0]));
				return node;
			</action>
		</rule>

		<!--
			For empty prio_tree_nodes, the parent points back to the node itself.

			References:
			http://lxr.free-electrons.com/source/include/linux/prio_tree.h?v=2.6.32#L89
		-->
		<rule priority="102">
			<name>vm_area_struct.shared.*</name>
			<description>Disambiguate the "shared" union.</description>
			<filter>
				<datatype>struct</datatype>
				<typename>vm_area_struct</typename>
				<members>
					<member>shared</member>
					<member match="any" />
				</members>
			</filter>
			<action type="inline">
				var vma = arguments[0];
				var members = arguments[1];
				var shared = vma.Member(members[0])
				var inst = shared.Member(members[1]);
				
				var treeValid = true;
				
				// If the parent is null, the tree surely is invalid
				if (shared.vm_set.parent.IsNull()) {
					treeValid = false;
				}
				// Otherwise the prio_tree_node's parent must point to itself
				else try {
					var node = shared.prio_tree_node;
					var parent = node.parent;
					treeValid = (node.Address() == node.parent.Address());
				}
				catch (e) {
					treeValid = false;
				}
				
				// Now check if the valid field was accessed
				if ((inst.Name() == "prio_tree_node" &amp;&amp; treeValid) ||
				    (inst.Name() != "prio_tree_node" &amp;&amp; !treeValid))
					return inst;
				else
					return new Instance();
			</action>
		</rule>

		<!--
			The struct anon_vma is head of a list to vm_area_struct objects.
			These objects are linked in their list_head field "anon_vma_node",
			but they also hold a pointer to the anon_vma struct that is the head
			of the list. We can use this to detect when the list points back to
			the head or to the next object.
			
			References:
			http://lxr.free-electrons.com/source/include/linux/rmap.h?v=2.6.32#L13
		-->
		<rule priority="102">
			<name>vm_area_struct.anon_vma_node.{next,prev}</name>
			<description>The the head of the list linked by "anon_vma_node" is an anon_vma structure.</description>
			<filter>
				<datatype>struct</datatype>
				<typename>vm_area_struct</typename>
				<members>
					<member>anon_vma_node</member>
					<member match="any" />
				</members>
			</filter>
			<action type="inline">
				var vma = arguments[0];
				var members = arguments[1];
				var next_vma = vma.Member(members[0]).Member(members[1]);

				try {
					// If this the next_vma instance actually belongs to the
					// vma's anon_vma header, return the anon_vma struct instead.
					var av = vma.anon_vma;
					if (av.head.Address() == next_vma.Address())
						return av;
				}
				catch (e) {
					// In case of an error, the defined type is returned
					return next_vma;
				}

				// Otherwise fix the offset and return a vm_area_struct
				next_vma.ChangeType(vma.TypeId());
				next_vma.AddToAddress(-vma.MemberOffset(members[0]));

				return next_vma;
			</action>
		</rule>
	</rules>
</typeknowledge>
