<?xml version="1.0" encoding="UTF-8"?>
<!--
	File created by Christian Schneider <chrschn@sec.in.tum.de>
-->
<typeknowledge version="1">
    <rules priority="100">
        <rule priority="111">
			<name>modules</name>
			<description>Variable "modules" is head of "struct module" objects.</description>
			<filter>
				<variablename>modules</variablename>
				<datatype>struct</datatype>
				<typename>list_head</typename>
				<members>
					<member match="any" />
				</members>
			</filter>
			<action type="inline">
				var inst = arguments[0];
				var members = arguments[1];
				inst = inst.Member(members[0]);
				inst.ChangeType("module");
				inst.AddToAddress(-inst.MemberOffset("list"));
				return inst;
			</action>
		</rule>

		<rule>
			<name>module.list</name>
			<description>
				Field "list" in "struct module" points to further module
				objects.
			</description>
			<filter>
				<datatype>struct</datatype>
				<typename>module</typename>
				<members>
					<member datatype="struct" typename="list_head">list</member>
					<member match="any" />
				</members>
			</filter>
			<action type="inline">
				var inst = arguments[0];
				var members = arguments[1];
				var typeId = inst.TypeId();
				inst = inst.Member(members[0]).Member(members[1]);
				// Compare to head of the list (which is no module)
				var m = new Instance("modules");
				if (m.Address() == inst.Address())
					return m;
				// Change type, fix offset
				inst.ChangeType(typeId);
				inst.AddToAddress(-inst.MemberOffset(members[0]));
				return inst;
			</action>
		</rule>

	</rules>
</typeknowledge>
