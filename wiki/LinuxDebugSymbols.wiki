#summary Generating and parsing debugging symbols for Linux

= Linux Debugging Symbols =

<wiki:toc max_depth="2" />

= Introduction =

The foundation of !InSight's ability to extract kernel objects out of physical memory are the debugging symbols of the Linux kernel being analyzed. These debugging symbols need to be generated by the compiler and parsed by !InSight prior to any analysis.

= Generating Debugging Symbols =

In order to create the debugging symbols for a Linux kernel, the kernel image of the system _begin analzed_ must be compiled with symbol generation switched on. If you intend to inspect a system running inside of a virtual machine, follow the instructions below from _within_ the virtual machine.

*Note:* This process does neither influence the semantics nor the performance of the resulting kernel image!

== Compiling the Kernel from Source ==

Unpack the source code of the running and change to its directory. Most Linux distributions provide means to obtain the source code of the distribution's kernel including all patches and additions. Consult the handbook of your package manager on how to do this. For a Debian and derived distributions such as Ubuntu, skip this section and [#Creating_Debian_Kernel_Packages continue below].

Start by creating a backup copy of the original `Makefile`:

{{{
cp -v Makefile Makefile.orig
}}}

Now add the compiler switches for enabling debugging symbols to the appropriate variables and append the string "`-dbg`" to the kernel version:

{{{
sed \
    -e 's@^\(CFLAGS_KERNEL\s*=\)@\1 -g @' \
    -e 's@^\(AFLAGS_KERNEL\s*=\)@\1 -gdwarf-2 @' \
    -e 's@^\(EXTRAVERSION\s*=\)\s*\([^ ]*\)\s*$@\1 \2-dbg@' \
    Makefile.orig > Makefile
}}}

To build the kernel with the exact same settings as the distribution maintainers used, just copy over the configuration file of the running kernel:

{{{
cp -v /boot/config-$(uname -r) .config
}}}

Now the kernel is ready to be built:

{{{
make modules bzImage
}}}

Install the resulting kernel:

{{{
sudo make modules_install &&
sudo cp -v arch/x86/boot/bzImage /boot/vmlinuz-$(uname -r)-dbg &&
sudo cp -v System.map /boot/System.map-$(uname -r)-dbg &&
sudo cp -v .config /boot/config-$(uname -r)-dbg &&
}}}

*Warning:* Your kernel might require an initial RAM disk to load some modules in order to mount the root file system! If this is the case, such a file must be generated as file `/boot/initrd-$(uname -r)-dbg`. As each Linux distribution implements its own way of creating such `initrd` files, we will not describe this process here. *The kernel image might not be boot-able without a corresponding `initrd` file!*

Now edit your bootloader's configuration files (most likely `/boot/grub/menu.lst`) and add a new entry for the new kernel image based on the entry for the currently running kernel and reboot your system to the new kernel.

== Creating Debian Kernel Packages ==

